
import streamlit as st
import folium
import pandas as pd
import plotly.express as px
from datetime import datetime
from plotly.subplots import make_subplots
import pydeck as pdk
import os
from streamlit_folium import folium_static
from streamlit_gsheets import GSheetsConnection



st.set_page_config(layout = 'wide', page_title = 'Dashboard PCA', page_icon= "üíπ")


@st.cache_data()
def load_dados(path):
    df = pd.read_excel(path)
    df['Bairro'] = df['Bairro'].astype(str)
    bairros = ['Todos'] + sorted(df['Bairro'].unique().tolist())

    coluna_nome = 'Qual √°rea da infraestrutura da sua comunidade precisa de aten√ß√£o?'
    options_list = [
        "Cal√ßamento/Pavimenta√ß√£o",
        "Coleta de lixo",
        "Ilumina√ß√£o p√∫blica",
        "Recapeamento (reparo do asfalto)",
        "Saneamento",
        "Poda de √°rvore",
        "Outros"
    ]

    for option in options_list:
        df[option + '_bool'] = df[coluna_nome].apply(lambda x: 'Precisa de Aten√ß√£o' if option in str(x) else 'N√£o Precisa de Aten√ß√£o')

    coluna_nome = 'Qual √°rea da educa√ß√£o na sua comunidade precisa de aten√ß√£o?'
    options_list = [
        "Infraestrutura escolar",
        "Quantidade de professores",
        "Material escolar",
        "Outro"
        ]

    for option in options_list:
        df[option + '_bool'] = df[coluna_nome].apply(lambda x: 'Precisa de Aten√ß√£o' if option in str(x) else 'N√£o Precisa de Aten√ß√£o')

    coluna_nome = 'Qual √°rea de esporte e lazer na sua comunidade precisa de aten√ß√£o?'
    options_list = [
        "Pra√ßas",
        "Atividades esportivas",
        "Atividades culturais",
        "√Åreas verdes",
        "Outro"
        ]

    for option in options_list:
        df[option + '_bool'] = df[coluna_nome].apply(lambda x: 'Precisa de Aten√ß√£o' if option in str(x) else 'N√£o Precisa de Aten√ß√£o')

    coluna_nome = 'Qual √°rea da sa√∫de na sua comunidade precisa de aten√ß√£o?'
    options_list = [
        "Postos de sa√∫de",
        "Profissionais de sa√∫de",
        "Fornecimento de Medicamentos",
        "Marca√ß√£o de Consultas e Exames"
        ]

    for option in options_list:
        df[option + '_bool'] = df[coluna_nome].apply(lambda x: 'Precisa de Aten√ß√£o' if option in str(x) else 'N√£o Precisa de Aten√ß√£o')

    coluna_nome = 'Qual √°rea da seguran√ßa p√∫blica na sua comunidade precisa de aten√ß√£o?'
    options_list = [
        "Monitoramento",
        "Outro"
        ]

    for option in options_list:
        df[option + '_bool'] = df[coluna_nome].apply(lambda x: 'Precisa de Aten√ß√£o' if option in str(x) else 'N√£o Precisa de Aten√ß√£o')


    coluna_nome = 'Qual √°rea social na sua comunidade precisa de aten√ß√£o?'
    options_list = [
        "Acesso a Programas de Assist√™ncia Social",
        "Apoio a Grupos Vulner√°veis",
        "Popula√ß√£o de rua"
        ]

    for option in options_list:
        df[option + '_bool'] = df[coluna_nome].apply(lambda x: 'Precisa de Aten√ß√£o' if option in str(x) else 'N√£o Precisa de Aten√ß√£o')

    for option in options_list:
        df[option + '_bool'] = df[coluna_nome].apply(lambda x: 'Precisa de Aten√ß√£o' if option in str(x) else 'N√£o Precisa de Aten√ß√£o')


    coluna_nome = 'Qual √°rea do transporte na sua comunidade precisa de aten√ß√£o?'
    options_list = [
        "Infraestrutura de transporte (Ex: abrigo de passageiros)",
        "Quantidade de linhas e hor√°rios dos √¥nibus",
        "Acessibilidade",
        "Tr√¢nsito"
        ]

    for option in options_list:
        df[option + '_bool'] = df[coluna_nome].apply(lambda x: 'Precisa de Aten√ß√£o' if option in str(x) else 'N√£o Precisa de Aten√ß√£o')

    return df


df = load_dados(os.getcwd()  +'/dfs/PCA- Comunidades de Angra  COPIA.xlsx')
bairros = ['Todos'] + sorted(df['Bairro'].unique().tolist())
df['Bairro'] = df['Bairro'].astype(str)


# Estilo CSS
st.markdown(
    """
    <style>
        .main {background-color: #f4f4f4;}
        .stText, .stTitle, .stSubheader {color: #333333;}
        .css-1d391kg {color: #333333;}
    </style>
    """,
    unsafe_allow_html=True
)

# Cabe√ßalho com logo e t√≠tulo
col_logo, col_titulo = st.columns([1.5, 3])
with col_logo:
    st.image('logo.png', width=400)
with col_titulo:
    st.markdown("<h1 style='text-align: center;'>Programa Comunidades Angra - PCA</h1>", unsafe_allow_html=True)
 
    
#filtro de sele√ß√£o do bairro:
bairro_caixas = st.sidebar.multiselect('Selecione o(s) Bairro (s)', bairros)


if 'Todos' in bairro_caixas or not bairro_caixas:
    df_filter = df.copy()
else:
    df_filter = df[df['Bairro'].isin(bairro_caixas)]


#DF DE EXIBI√á√ÉO
with st.container(border = True, height= 300):
    df_exibi√ß√£o = df.drop(['Tr√¢nsito_bool', 'Acessibilidade_bool',
       'Quantidade de linhas e hor√°rios dos √¥nibus_bool',
       'Infraestrutura de transporte (Ex: abrigo de passageiros)_bool',
       'Popula√ß√£o de rua_bool', 'Apoio a Grupos Vulner√°veis_bool',
       'Acesso a Programas de Assist√™ncia Social_bool', 'Monitoramento_bool',
       'Marca√ß√£o de Consultas e Exames_bool',
       'Fornecimento de Medicamentos_bool', 'Profissionais de sa√∫de_bool',
       'Postos de sa√∫de_bool', '√Åreas verdes_bool',
       'Atividades culturais_bool', 'Atividades esportivas_bool',
       'Pra√ßas_bool', 'Outro_bool', 'Material escolar_bool',
       'Quantidade de professores_bool', 'Infraestrutura escolar_bool',
       'Outros_bool', 'Poda de √°rvore_bool', 'Saneamento_bool',
       'Recapeamento (reparo do asfalto)_bool', 'Ilumina√ß√£o p√∫blica_bool',
       'Coleta de lixo_bool', 'Cal√ßamento/Pavimenta√ß√£o_bool', 'lon', 'lat',], axis= 1)
    st.subheader(f" Registros coletados do PCA no(s) bairro(s)")
    st.dataframe(df_exibi√ß√£o)


aba1, aba2, aba3 = st.tabs(["Vis√£o Geral", "Avalia√ß√µes", "Distribui√ß√£o Espacial"])


with aba1:
    col_1, col_2, col_3 = st.columns([1,0.7,1], vertical_alignment= 'top', border= True)
    with col_1: 
        with st.container(border = True, height= 350):
            st.subheader("Informa√ß√µes Gerais do(s) bairro(s) selecionado(s)")
            st.text(f"Quantidade de Formul√°rios Preenchidos: {len(df_filter)} unidades")
            st.text(f"Tempo M√©dio de Moradia: {int(df_filter['H√° quanto tempo mora no bairro? (em anos)'].mean())}")

            
        with st.container(border = True, height= 450):
            fig_sexo = px.bar(df_filter, x = 'G√™nero', color= 'G√™nero', template= 'simple_white',  
                            title = 'Distribui√ß√£o de G√™nero:' )
            fig_sexo.update_xaxes(title_text =  ' ')
            fig_sexo.update_yaxes(title_text =  'Respostas Coletadas')
            fig_sexo.update_layout(width = 250, height = 350)
            st.plotly_chart(fig_sexo) 
        
    with col_2:
        with st.container(border = True, height= 350): 
            df_pie = df_filter['Ra√ßa'].value_counts().reset_index()
            df_pie.columns = ['Ra√ßa', 'Quantidade']
            fig_pie = px.pie(df_pie, values = 'Quantidade',
                            names = 'Ra√ßa', 
                            title = 'Distribui√ß√£o racial', 
                            template= 'simple_white')
            fig_pie.update_layout(width = 250, height = 350)
            st.plotly_chart(fig_pie)
        with st.container(border = True, height= 450):
            fig_idade = px.histogram(df_filter, x = 'Idade', template= 'simple_white', 
                                     color= 'G√™nero', title = 'Faixa Et√°ria')
            fig_idade.update_yaxes(title_text = 'Respostas Coeltadas')
            st.plotly_chart(fig_idade)



    with col_3:
        with st.container(border = True, height= 800):
            fig_moradia = px.histogram(df_filter, y = 'H√° quanto tempo mora no bairro? (em anos)', color = 'G√™nero', template= 'simple_white', title= 'Tempo de Moradia')
            fig_moradia.update_yaxes(title_text = 'Respostas Coeltadas')
            fig_moradia.update_xaxes(title_text = 'Tempo de moradia (em anos)')
            fig_moradia.update_layout(width = 600, height = 800)

            st.plotly_chart(fig_moradia)

           

with aba2:

    col_4, col_5, col_6 = st.columns([2,2,2], vertical_alignment= 'top', border= True)
    with col_4:

        calcamento_graph = px.bar(df_filter, x = 'Avalia√ß√£o quanto ao fornecimento de Servi√ßos P√∫blicos na sua comunidade: [Cal√ßamento]' ,
                color = 'G√™nero', template= 'simple_white', title = 'Avalia√ß√£o do Cal√ßamento')

        seguranca_graph = px.bar(df_filter, x = 'Avalia√ß√£o quanto ao fornecimento de Servi√ßos P√∫blicos na sua comunidade: [Seguran√ßa]', 
                        color = 'G√™nero', template= 'simple_white', title = 'Avalia√ß√£o da Seguran√ßa')

        lixo_graph = px.bar(df_filter, x = 'Avalia√ß√£o quanto ao fornecimento de Servi√ßos P√∫blicos na sua comunidade: [Coleta de lixo]', 
                        color = 'G√™nero', template= 'simple_white', title = 'Avalia√ß√£o da Coleta de Lixo')

        educacao_graph = px.bar(df_filter, x = 'Avalia√ß√£o quanto ao fornecimento de Servi√ßos P√∫blicos na sua comunidade: [Educa√ß√£o]',
                        color = 'G√™nero', template= 'simple_white', title = 'Avalia√ß√£o da Educa√ß√£o')

        lazer_graph = px.bar(df_filter, x = 'Avalia√ß√£o quanto ao fornecimento de Servi√ßos P√∫blicos na sua comunidade: [Lazer]', 
                        color = 'G√™nero', template= 'simple_white', title = 'Avalia√ß√£o da Lazer')

        iluminacao_graph = px.bar(df_filter, x = 'Avalia√ß√£o quanto ao fornecimento de Servi√ßos P√∫blicos na sua comunidade: [Ilumina√ß√£o P√∫blica]', 
                        color = 'G√™nero', template= 'simple_white', title = 'Avalia√ß√£o da Ilumina√ß√£o P√∫blica')

        saneamento_graph = px.bar(df_filter, x = 'Avalia√ß√£o quanto ao fornecimento de Servi√ßos P√∫blicos na sua comunidade: [Saneamento]', 
                        color = 'G√™nero', template= 'simple_white', title = 'Avalia√ß√£o do Saneamento')

        saude_graph = px.bar(df_filter, x = 'Avalia√ß√£o quanto ao fornecimento de Servi√ßos P√∫blicos na sua comunidade: [Sa√∫de]', 
                        color = 'G√™nero', template= 'simple_white', title = 'Avalia√ß√£o da Sa√∫de')

        social_graph = px.bar(df_filter, x = 'Avalia√ß√£o quanto ao fornecimento de Servi√ßos P√∫blicos na sua comunidade: [Social]', 
                        color = 'G√™nero', template= 'simple_white', title = 'Avalia√ß√£o do Social')

        transporte_graph = px.bar(df_filter, x = 'Avalia√ß√£o quanto ao fornecimento de Servi√ßos P√∫blicos na sua comunidade: [Transporte]', 
                        color = 'G√™nero', template= 'simple_white', title = 'Avalia√ß√£o do Transporte')



        list_charts = [calcamento_graph, seguranca_graph,lixo_graph, educacao_graph, lazer_graph, iluminacao_graph,
                    saneamento_graph, saude_graph, social_graph, transporte_graph]

        list_charts_name = ['Avalia√ß√£o do Cal√ßamento', 'Avalia√ß√£o da Seguran√ßa', 'Avalia√ß√£o da Coleta de Lixo', 
                            'Avalia√ß√£o da Educa√ß√£o', 'Avalia√ß√£o da Lazer', 'Avalia√ß√£o da Ilumina√ß√£o P√∫blica', 
                            'Avalia√ß√£o do Saneamento', 'Avalia√ß√£o da Sa√∫de', 'Avalia√ß√£o do Social', 'Avalia√ß√£o do Transporte']
        
        with st.container(border=True):
            selected_chart_name = st.selectbox("# Selecione o tipo de Avalia√ß√£o", list_charts_name)
            selected_chart = list_charts[list_charts_name.index(selected_chart_name)]
            selected_chart.update_xaxes(title_text =  ' ')
            selected_chart.update_yaxes(title_text =  'Respostas Coletadas')
            st.plotly_chart(selected_chart)
    
    with col_5:

        list_areas = ['Infraestrutura', 'Educa√ß√£o', 'Lazer', 'Sa√∫de', 'Seguran√ßa P√∫blica',
                    'Social', 'Transporte']
        
        dict_troubles = {
                        'Infraestrutura': ['Cal√ßamento/Pavimenta√ß√£o','Coleta de lixo', 'Ilumina√ß√£o p√∫blica','Recapeamento (reparo do asfalto)', "Saneamento", "Poda de √°rvore", "Outros"],
                        'Educa√ß√£o': ['Infraestrutura escolar','Quantidade de professores', 'Material escolar', 'Outro'],
                        'Lazer': ['Pra√ßas', 'Atividades esportivas', 'Atividades culturais', '√Åreas verdes','Outro'],
                        'Sa√∫de': ['Postos de sa√∫de','Profissionais de sa√∫de', 'Fornecimento de Medicamentos', 'Marca√ß√£o de Consultas e Exames'],
                        'Seguran√ßa P√∫blica': ['Monitoramento', 'Outro'],
                        'Social': ['Acesso a Programas de Assist√™ncia Social', 'Apoio a Grupos Vulner√°veis', 'Popula√ß√£o de rua'],
                        'Transporte': ['Infraestrutura de transporte (Ex: abrigo de passageiros)', 'Quantidade de linhas e hor√°rios dos √¥nibus', 'Tr√¢nsito']
                        }
        
        fig_dict = {
            'Cal√ßamento/Pavimenta√ß√£o': px.bar(df_filter, x='Cal√ßamento/Pavimenta√ß√£o_bool', color= 'G√™nero', template= 'simple_white'),
            'Poda de √°rvore': px.bar(df_filter, x='Poda de √°rvore_bool', color= 'G√™nero', template= 'simple_white'),
            'Saneamento': px.bar(df_filter, x='Saneamento_bool', color= 'G√™nero', template= 'simple_white'),
            'Recapeamento (reparo do asfalto)': px.bar(df_filter, x='Recapeamento (reparo do asfalto)_bool', color= 'G√™nero', template= 'simple_white'),
            'Coleta de lixo': px.bar(df_filter, x='Coleta de lixo_bool', color= 'G√™nero', template= 'simple_white'),
            'Infraestrutura escolar' :px.bar(df_filter, x='Infraestrutura escolar_bool', color= 'G√™nero', template= 'simple_white'),
            'Quantidade de professores': px.bar(df_filter, x='Quantidade de professores_bool', color= 'G√™nero', template= 'simple_white'), 
            'Material escolar': px.bar(df_filter, x='Material escolar_bool', color= 'G√™nero', template= 'simple_white'), 
            'Pra√ßas':px.bar(df_filter, x='Pra√ßas_bool', color= 'G√™nero', template= 'simple_white'), 
            'Atividades esportivas': px.bar(df_filter, x='Atividades esportivas_bool', color= 'G√™nero', template= 'simple_white'), 
            'Atividades culturais': px.bar(df_filter, x='Atividades culturais_bool', color= 'G√™nero', template= 'simple_white'), 
            '√Åreas verdes': px.bar(df_filter, x='√Åreas verdes_bool', color= 'G√™nero', template= 'simple_white'),
            'Postos de sa√∫de': px.bar(df_filter, x='Postos de sa√∫de_bool', color= 'G√™nero', template= 'simple_white'),
            'Profissionais de sa√∫de': px.bar(df_filter, x='Profissionais de sa√∫de_bool', color= 'G√™nero', template= 'simple_white'), 
            'Fornecimento de Medicamentos': px.bar(df_filter, x='Fornecimento de Medicamentos_bool', color= 'G√™nero', template= 'simple_white'), 
            'Marca√ß√£o de Consultas e Exames': px.bar(df_filter, x='Marca√ß√£o de Consultas e Exames_bool', color= 'G√™nero', template= 'simple_white'),
            'Monitoramento': px.bar(df_filter, x='Monitoramento_bool', color= 'G√™nero', template= 'simple_white'),
            'Acesso a Programas de Assist√™ncia Social': px.bar(df_filter, x='Acesso a Programas de Assist√™ncia Social_bool', color= 'G√™nero', template= 'simple_white'), 
            'Apoio a Grupos Vulner√°veis': px.bar(df_filter, x='Apoio a Grupos Vulner√°veis_bool', color= 'G√™nero', template= 'simple_white'), 
            'Popula√ß√£o de rua': px.bar(df_filter, x='Popula√ß√£o de rua_bool', color= 'G√™nero', template= 'simple_white'),
            'Infraestrutura de transporte (Ex: abrigo de passageiros)': px.bar(df_filter, x='Infraestrutura de transporte (Ex: abrigo de passageiros)_bool', color= 'G√™nero', template= 'simple_white'), 
            'Quantidade de linhas e hor√°rios dos √¥nibus': px.bar(df_filter, x='Quantidade de linhas e hor√°rios dos √¥nibus_bool', color= 'G√™nero', template= 'simple_white'), 
            'Tr√¢nsito': px.bar(df_filter, x='Tr√¢nsito_bool', color= 'G√™nero', template= 'simple_white')
        }
        
        selection_area = st.selectbox('Selecione o Servi√ßo P√∫blica', list_areas)
        

        if selection_area in dict_troubles.keys():
            selection_trouble = st.selectbox('Selecione o Tipo de Problema', dict_troubles[selection_area])
            
            if selection_trouble in fig_dict:
                fig = fig_dict[selection_trouble]
                fig.update_xaxes(title_text =  ' ')
                fig.update_yaxes(title_text =  'Respostas Coletadas')
                col_5.plotly_chart(fig)
        
            else:
                col_5.write('N√£o h√° dados disppon√≠veis para essa op√ß√£o')
   
    with col_6:

        df_pie_col6 = df_filter['Teria alguma demanda espec√≠fica quanto √† algum tipo de servi√ßo p√∫blico na sua comunidade?'].value_counts().reset_index()
        df_pie_col6.columns = ['Teria alguma demanda espec√≠fica quanto √† algum tipo de servi√ßo p√∫blico na sua comunidade?', 'Quantidade']

        fig_pie_col6 = px.pie(df_pie_col6, values = 'Quantidade', 
                names = 'Teria alguma demanda espec√≠fica quanto √† algum tipo de servi√ßo p√∫blico na sua comunidade?', 
                title = 'Demanda espec√≠fica quanto √† algum tipo de servi√ßo p√∫blico', 
                template= 'simple_white')
        col_6.plotly_chart(fig_pie_col6)    

with aba3:
    with st.container(border= True,height= 600):
        st.subheader("Mapa de Registros")
        st.map(df_filter)


    